package net.greatsoft.core.web.system;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.rest.webmvc.BasePathAwareController;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import net.greatsoft.core.domain.mapper.AttachmentMapper;
import net.greatsoft.core.domain.model.task.Attachment;
import net.greatsoft.core.repository.task.AttachmentRepository;
import net.greatsoft.core.service.system.AttachmentService;
import net.greatsoft.core.service.task.TaskExecuteService;
import net.greatsoft.core.web.dto.ResultDto;

/**
 * 上传文件控制器
 * @author Aptx4869
 *
 */
@RestController
@RequestMapping(value = "/uploadFile")
public class UploadController {
	
	@Value("${file.path.attachment}")
	private String attachmentPath;
	
	@Autowired
	private AttachmentService attachmentService;
	
	@PostMapping(value = "/attachment/upload")
	public ResultDto attahmentFileUpload(@RequestParam("file") MultipartFile multipartFile, String userId, String category, String orgId, HttpServletRequest request) {
		UUID uuid = UUID.randomUUID();
		String filePath = attachmentPath + "/uploadFile/" + uuid;
		String suffix = multipartFile.getOriginalFilename().substring(multipartFile.getOriginalFilename().lastIndexOf("."));
		String fileUrl = filePath + suffix;
		File file = new File(fileUrl);
		if(!file.exists()){
			new File(fileUrl.substring(0, fileUrl.lastIndexOf("/"))).mkdirs();
		}
		try {
			multipartFile.transferTo(file);
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		if ("0".equals(category)  || "1".equals(category)) {
			Attachment findByCondition = this.attachmentService.findByCondition(orgId, category);
			if (findByCondition != null) {
				this.attachmentService.delete(findByCondition.getId());
			}
		}
		
		Attachment attachment = new Attachment();
		attachment.setFileUrl(fileUrl);
		attachment.setCreateUserId(userId);
		attachment.setFileName(multipartFile.getOriginalFilename());
		attachment.setStatus("0");
		attachment.setCreateTime(new Date());
		attachment.setCategory(category);
		attachment.setOrgId(orgId);
		Attachment saveAndFlush = this.attachmentService.save(attachment);
		return new ResultDto(ResultDto.CODE_SUCCESS, "", saveAndFlush);
	}
	
	@GetMapping(value = "/attachment/findByOrgId/{orgId}")
	public List<Attachment> findByOrgId(@PathVariable String orgId) {
		return this.attachmentService.findByOrgId(orgId);
	}
	
	@GetMapping(value = "/attachment/findUploadFileAll")
	public List<Attachment> findUploadFileAll() {
		return this.attachmentService.findUploadFileAll();
	}
	
	@PostMapping(value = "/attachment/delete/{id}")
	@Transactional
	public ResultDto deleteUploadFile(@PathVariable Long id) {
		Map<String,Object> result = new HashMap<String,Object>();
		this.attachmentService.delete(id);
		result.put("flag", true);
		return new ResultDto(ResultDto.CODE_SUCCESS,"", result);
	}
}
